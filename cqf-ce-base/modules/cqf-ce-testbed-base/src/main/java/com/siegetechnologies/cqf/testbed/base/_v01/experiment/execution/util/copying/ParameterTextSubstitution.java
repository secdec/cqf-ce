package com.siegetechnologies.cqf.testbed.base._v01.experiment.execution.util.copying;

/*-
 * #%L
 * cqf-ce-testbed-base
 * %%
 * Copyright (C) 2009 - 2017 Siege Technologies, LLC
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.text.StrSubstitutor;

/**
 * Utility for copying one stream to another, while substituting certain parts.
 * 
 * @author taylorj
 */
final class ParameterTextSubstitution {
	
	/**
	 * The parameter substitution pattern.
	 */
	public static final String CQF_PARAMETER_REGEX = "CQF_(.*?)_CQF";

	/**
	 * A compiled pattern for CQF substitution parameters. The regex is
	 * {@link #CQF_PARAMETER_REGEX}.
	 */
	public static final Pattern CQF_PARAMETER = Pattern.compile("CQF_(.*?)_CQF");

	private ParameterTextSubstitution() {}

	/**
	 * Replace each portion of text within the group within a
	 * {@link #CQF_PARAMETER} with text generated by the substitutor.
	 * 
	 * @param input the input test
	 * @param substitutor the substitutor
	 * @return the resulting string
	 */
	private static String replaceParameters(String input, StrSubstitutor substitutor) {
		Matcher m = CQF_PARAMETER.matcher(input);
		// Matcher#appendReplacement requires StringBuffer, and doesn't
		// have a StringBuilder variant.
		StringBuffer sb = new StringBuffer();
		while (m.find()) {
			m.appendReplacement(sb, "");
			String text = m.group(1);
			sb.append(substitutor.replace(text));
		}
		m.appendTail(sb);
		return sb.toString();
	}

	/**
	 * Copy data from input stream to output stream, replacing instance of
	 * {@link #CQF_PARAMETER} with the corresponding parameter value.
	 * 
	 * @param input the input stream
	 * @param output the output stream
	 * @param substitutor the substitutor
	 * 
	 * @throws IOException if an I/O error occurs
	 */
	public static void replacingCopy(InputStream input, OutputStream output, StrSubstitutor substitutor)
			throws IOException {
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(input));
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(output))) {
			// newlines aren't preserved properly, since we're using readLine,
			// which strips line terminators, and then using newLine to put one
			// back. This will almost certainly break binary files.
			String inputLine;
			String outputLine;
			while (null != (inputLine = reader.readLine())) {
				outputLine = replaceParameters(inputLine, substitutor);
				out.write(outputLine);
				out.append('\n');
			}
		}
	}
}
