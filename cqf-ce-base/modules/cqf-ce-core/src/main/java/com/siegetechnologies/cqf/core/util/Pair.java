/**
 *  Copyright (c) 2016 Siege Technologies.
 */
package com.siegetechnologies.cqf.core.util;

/*-
 * #%L
 * cqf-ce-core
 * %%
 * Copyright (C) 2009 - 2017 Siege Technologies, LLC
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.util.Map;
import java.util.Objects;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Collectors;

/**
 * A pair of two values.
 * 
 * @author taylorj
 *
 * @param <L> the type of the left value
 * @param <R> the type of the right value
 */
public class Pair<L, R> {
	/**
	 * the left element
	 */
	private final L left;

	/**
	 * the right element
	 */
	private final R right;

	/**
	 * Creates a new pair. Use the {@link #of(Object, Object)} factory method
	 * instead.
	 * 
	 * @param left the left element
	 * @param right the right element
	 */
	private Pair(L left, R right) {
		this.left = left;
		this.right = right;
	}

	/**
	 * Returns a pair of the left and right elements
	 * 
	 * @param left the left element
	 * @param right the right element
	 * @return a pair of the left and right elements
	 * 
	 * @param <L> left type
	 * @param <R> right type
	 */
	public static <L, R> Pair<L, R> of(L left, R right) {
		return new Pair<>(left, right);
	}

	/**
	 * Returns a supplier of a pair of provided fields. The supplier returns a
	 * new pair on each invocation.
	 * 
	 * @param left the left element
	 * @param right the right element
	 * @return the supplier
	 */
	public static <L, R> Supplier<Pair<L, R>> supplierOf(L left, R right) {
		return () -> Pair.of(left, right);
	}

	/**
	 * @return the left element
	 */
	public L getLeft() {
		return left;
	}

	/**
	 * @return the right element
	 */
	public R getRight() {
		return right;
	}

	@Override
	public int hashCode() {
		return Objects.hash(getLeft(), getRight());
	}

	@Override
	public boolean equals(Object obj) {
		if (obj instanceof Pair) {
			Pair<?, ?> that = (Pair<?, ?>) obj;
			return Objects.equals(this.getLeft(), that.getLeft()) && Objects.equals(this.getRight(), that.getRight());
		}
		else {
			return false;
		}
	}

	@Override
	public String toString() {
		return String.format("Pair.of(%s,%s)", getLeft(), getRight());
	}

	/**
	 * @return a pair with swapped elements
	 */
	public Pair<R, L> swap() {
		return Pair.of(getRight(), getLeft());
	}

	/**
	 * Returns a new pair constructed from elements produced by applying the
	 * mappers to the elements of this pair
	 * 
	 * @param leftMapper the function to apply to the left element
	 * @param rightMapper the function to apply to the right element
	 * @return the new pair
	 * 
	 * @param <L1> the left result type
	 * @param <R1> the right result type
	 */
	public <L1, R1> Pair<L1, R1> map(Function<L, L1> leftMapper, Function<R, R1> rightMapper) {
		return Pair.of(leftMapper.apply(getLeft()), rightMapper.apply(getRight()));
	}

	/**
	 * Returns a pair with a left element generated by mapper, and the right
	 * element of this pair.
	 * 
	 * @param mapper the function to apply to the left element
	 * @return the new pair
	 * 
	 * @param <L1> the left result type
	 */
	public <L1> Pair<L1, R> mapLeft(Function<L, L1> mapper) {
		return this.map(mapper, Function.identity());
	}

	/**
	 * Returns a pair with this pair's left element, and a right element
	 * generated by applying mapper to the right element.
	 * 
	 * @param mapper the function to apply to the right element
	 * @return the new pair
	 * 
	 * @param <R1> the right result type
	 */
	public <R1> Pair<L, R1> mapRight(Function<R, R1> mapper) {
		return this.map(Function.identity(), mapper);
	}

	/**
	 * Call a bifunction with the left and right elements
	 * 
	 * @param bifunction the bifunction
	 * @return the result of the bifunction
	 * 
	 * @param <T> the result type
	 */
	public <T> T call(BiFunction<L, R, T> bifunction) {
		return bifunction.apply(getLeft(), getRight());
	}

	/**
	 * Returns a collector that creates a map from pairs where the left element
	 * of the pair is the key and the right element of the pair is the value.
	 * 
	 * @return the collector
	 * 
	 * @param <L> the left type of the pair, and the key type
	 * @param <R> the right type of the pair, and the value type
	 */
	public static <L, R> Collector<Pair<L, R>, ?, Map<L, R>> toMap() {
		return Collectors.toMap(Pair::getLeft, Pair::getRight);
	}
}
